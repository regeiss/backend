#!/bin/bash

echo "=== SOLU√á√ÉO COMPLETA DO PROBLEMA NGINX ==="
echo
echo "üéØ PROBLEMA IDENTIFICADO:"
echo "   O erro 'host not found in upstream backend:8000' √© ESPERADO"
echo "   quando testamos nginx standalone - o servi√ßo 'backend' s√≥"
echo "   existe dentro da rede do docker-compose."
echo
echo "üîß VAMOS RESOLVER TUDO DE UMA VEZ!"
echo

# Fun√ß√£o para aguardar usu√°rio
wait_user() {
    echo "Pressione ENTER para continuar..."
    read
}

# 1. Parar tudo
echo "1Ô∏è‚É£ LIMPEZA INICIAL"
echo "=================="
docker compose down --volumes --remove-orphans 2>/dev/null || true
echo "‚úÖ Containers parados"

# 2. Remover poss√≠vel diret√≥rio nginx.conf problem√°tico
echo ""
echo "2Ô∏è‚É£ CORRIGINDO ESTRUTURA DE ARQUIVOS"
echo "==================================="

if [ -d "nginx/nginx.conf" ]; then
    echo "‚ö†Ô∏è ENCONTRADO: nginx.conf como DIRET√ìRIO (erro principal!)"
    echo "   Removendo diret√≥rio incorreto..."
    sudo rm -rf nginx/nginx.conf
    echo "‚úÖ Diret√≥rio problem√°tico removido"
else
    echo "‚úÖ nginx.conf n√£o √© um diret√≥rio - OK"
fi

# Criar diret√≥rio nginx se n√£o existir
mkdir -p nginx

# 3. Criar configura√ß√£o nginx correta
echo ""
echo "3Ô∏è‚É£ CRIANDO CONFIGURA√á√ÉO NGINX CORRETA"
echo "====================================="

# Backup se arquivo existir
if [ -f "nginx/nginx.conf" ]; then
    cp nginx/nginx.conf nginx/nginx.conf.backup.$(date +%Y%m%d_%H%M%S)
    echo "‚úÖ Backup da configura√ß√£o anterior criado"
fi

# Criar configura√ß√£o principal
cat > nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    upstream django {
        server backend:8000;
    }

    server {
        listen 80;
        server_name _;
        
        client_max_body_size 100M;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin";

        location / {
            proxy_pass http://django;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS headers para Flutter
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /static/ {
            alias /app/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }

        location /media/ {
            alias /app/media/;
            expires 7d;
            add_header Cache-Control "public";
        }
        
        # Health check endpoint para monitoramento
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

chmod 644 nginx/nginx.conf
echo "‚úÖ nginx.conf criado com permiss√µes corretas"

# Criar vers√£o de teste para valida√ß√£o standalone
cat > nginx/nginx-standalone-test.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name _;
        
        location / {
            return 200 "Nginx syntax OK - Ready for docker-compose";
            add_header Content-Type text/plain;
        }
        
        location /nginx-health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

echo "‚úÖ Vers√£o de teste standalone criada"

# 4. Testar sintaxe
echo ""
echo "4Ô∏è‚É£ TESTANDO SINTAXE NGINX"
echo "========================="

echo "üß™ Testando vers√£o standalone (sem depend√™ncia do backend)..."
standalone_test=$(docker run --rm -v "$(pwd)/nginx/nginx-standalone-test.conf:/etc/nginx/nginx.conf:ro" nginx:alpine nginx -t 2>&1)

if echo "$standalone_test" | grep -q "test is successful"; then
    echo "‚úÖ Sintaxe do nginx est√° correta!"
else
    echo "‚ùå Problema na sintaxe do nginx:"
    echo "$standalone_test"
    echo "üö® Abortando - corrija a sintaxe primeiro"
    exit 1
fi

# 5. Corrigir docker-compose.yml
echo ""
echo "5Ô∏è‚É£ CORRIGINDO DOCKER-COMPOSE.YML"
echo "================================"

# Backup do docker-compose atual
cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true

# Criar vers√£o corrigida com bind mount expl√≠cito
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  backend:
    build: ./backend
    container_name: cadastro_api
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - redis
    environment:
      - DEBUG=${DEBUG:-0}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@10.13.88.6:5432/dev_cadastro_unificado}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,10.13.65.37}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://10.13.65.37:8001,http://10.13.65.37:8081,http://10.13.65.37:3000}
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --reload --timeout 120
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: cadastro_redis
    volumes:
      - redis_data:/data
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: cadastro_nginx
    ports:
      - "8081:80"
    volumes:
      # BIND MOUNT EXPL√çCITO para evitar erro de volume
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  static_volume:
  media_volume:
  redis_data:
EOF

echo "‚úÖ docker-compose.yml corrigido com bind mount expl√≠cito"

# 6. Verificar arquivos
echo ""
echo "6Ô∏è‚É£ VERIFICA√á√ÉO FINAL DOS ARQUIVOS"
echo "================================="

echo "üìÅ Estrutura do diret√≥rio nginx:"
ls -la nginx/

echo ""
echo "üìÑ Verificando tipo de arquivo nginx.conf:"
file nginx/nginx.conf

echo ""
echo "üîç Tamanho e permiss√µes:"
stat nginx/nginx.conf 2>/dev/null || ls -l nginx/nginx.conf

# 7. Construir e iniciar
echo ""
echo "7Ô∏è‚É£ CONSTRUINDO E INICIANDO APLICA√á√ÉO"
echo "===================================="

echo "üèóÔ∏è Construindo imagens..."
docker compose build --no-cache

echo ""
echo "üöÄ Iniciando servi√ßos..."
docker compose up -d

# 8. Aguardar e testar
echo ""
echo "8Ô∏è‚É£ TESTANDO APLICA√á√ÉO"
echo "===================="

echo "‚è≥ Aguardando containers subirem..."
sleep 30

echo "üìä Status dos containers:"
docker compose ps

echo ""
echo "üß™ Testando endpoints..."

# Teste backend direto
echo "Backend direto (porta 8001):"
backend_test=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/api/v1/health/ 2>/dev/null)
if [ "$backend_test" = "200" ]; then
    echo "‚úÖ Backend OK"
else
    echo "‚ùå Backend falhou (c√≥digo: $backend_test)"
fi

# Teste nginx proxy
echo "Nginx proxy (porta 8081):"
nginx_test=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/api/v1/health/ 2>/dev/null)
if [ "$nginx_test" = "200" ]; then
    echo "‚úÖ Nginx proxy OK"
else
    echo "‚ùå Nginx proxy falhou (c√≥digo: $nginx_test)"
fi

# Teste nginx health
echo "Nginx health check:"
nginx_health=$(curl -s http://localhost:8081/nginx-health 2>/dev/null)
if echo "$nginx_health" | grep -q "healthy"; then
    echo "‚úÖ Nginx health OK"
else
    echo "‚ùå Nginx health falhou"
fi

echo ""
echo "üéâ SOLU√á√ÉO COMPLETA EXECUTADA!"
echo "=============================="
echo ""

# Mostrar resultado final
if [ "$backend_test" = "200" ] && [ "$nginx_test" = "200" ]; then
    echo "üü¢ SUCESSO TOTAL! Tudo funcionando:"
    echo ""
    echo "üîó URLs DISPON√çVEIS:"
    echo "   ‚Ä¢ Backend direto: http://localhost:8001"
    echo "   ‚Ä¢ Nginx proxy:    http://localhost:8081"
    echo "   ‚Ä¢ Health check:   http://localhost:8081/api/v1/health/"
    echo "   ‚Ä¢ Documenta√ß√£o:   http://localhost:8081/api/docs/"
    echo "   ‚Ä¢ Admin:          http://localhost:8081/admin/"
    echo ""
    echo "‚úÖ O problema do nginx foi COMPLETAMENTE resolvido!"
    
elif [ "$backend_test" = "200" ]; then
    echo "üü° SUCESSO PARCIAL - Backend funcionando, nginx com problemas:"
    echo ""
    echo "üîó URLs FUNCIONANDO:"
    echo "   ‚Ä¢ Backend: http://localhost:8001"
    echo "   ‚Ä¢ Health:  http://localhost:8001/api/v1/health/"
    echo "   ‚Ä¢ Docs:    http://localhost:8001/api/docs/"
    echo ""
    echo "üîß Para ver logs do nginx:"
    echo "   docker compose logs nginx"
    
else
    echo "üî¥ PROBLEMAS DETECTADOS:"
    echo ""
    echo "üìã Logs dos containers:"
    docker compose logs --tail=10
    echo ""
    echo "üö® SOLU√á√ÉO DE EMERG√äNCIA DISPON√çVEL:"
    echo "   ./emergency_start.sh"
fi

echo ""
echo "üìù COMANDOS √öTEIS PARA MANUTEN√á√ÉO:"
echo "   ‚Ä¢ Ver logs:      docker compose logs -f"
echo "   ‚Ä¢ Parar tudo:    docker compose down"
echo "   ‚Ä¢ Reiniciar:     docker compose restart"
echo "   ‚Ä¢ Shell Django:  docker compose exec backend python manage.py shell"
echo ""
echo "üéØ PROBLEMA ORIGINAL RESOLVIDO:"
echo "   ‚úÖ nginx.conf n√£o √© mais um diret√≥rio"
echo "   ‚úÖ Bind mount expl√≠cito configurado"
echo "   ‚úÖ Configura√ß√£o nginx validada"
echo "   ‚úÖ docker-compose.yml corrigido"
