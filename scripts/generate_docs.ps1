# Script para gerar e testar documenta√ß√£o da API (PowerShell)
# Autor: Sistema de Cadastro Unificado
# Data: $(Get-Date)

param(
    [switch]$Verbose
)

# Configura√ß√µes
$BaseUrl = "https://10.13.65.37:8443"
$ApiDocsUrl = "$BaseUrl/api/docs/"
$ReDocUrl = "$BaseUrl/api/redoc/"
$SchemaUrl = "$BaseUrl/api/schema/"
$HealthUrl = "$BaseUrl/api/v1/health/"

# Fun√ß√£o para log colorido
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    switch ($Level) {
        "INFO" { 
            Write-Host "[$timestamp] [INFO] $Message" -ForegroundColor Green 
        }
        "WARN" { 
            Write-Host "[$timestamp] [WARN] $Message" -ForegroundColor Yellow 
        }
        "ERROR" { 
            Write-Host "[$timestamp] [ERROR] $Message" -ForegroundColor Red 
        }
        "SUCCESS" { 
            Write-Host "[$timestamp] [SUCCESS] $Message" -ForegroundColor Cyan 
        }
    }
}

# Fun√ß√£o para testar conectividade
function Test-Connectivity {
    Write-Log "Testando conectividade com o servidor..."
    
    try {
        $response = Invoke-WebRequest -Uri $HealthUrl -SkipCertificateCheck -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
            Write-Log "‚úÖ Conectividade OK" -Level SUCCESS
            return $true
        }
    }
    catch {
        Write-Log "‚ùå Falha na conectividade: $($_.Exception.Message)" -Level ERROR
        return $false
    }
}

# Fun√ß√£o para testar endpoints de documenta√ß√£o
function Test-DocumentationEndpoints {
    Write-Log "Testando endpoints de documenta√ß√£o..."
    
    # Testar Swagger UI
    try {
        $response = Invoke-WebRequest -Uri $ApiDocsUrl -SkipCertificateCheck -TimeoutSec 10
        if ($response.Content -match "swagger-ui") {
            Write-Log "‚úÖ Swagger UI funcionando" -Level SUCCESS
        }
        else {
            Write-Log "‚ùå Swagger UI com problemas" -Level ERROR
        }
    }
    catch {
        Write-Log "‚ùå Erro no Swagger UI: $($_.Exception.Message)" -Level ERROR
    }
    
    # Testar ReDoc
    try {
        $response = Invoke-WebRequest -Uri $ReDocUrl -SkipCertificateCheck -TimeoutSec 10
        if ($response.Content -match "redoc") {
            Write-Log "‚úÖ ReDoc funcionando" -Level SUCCESS
        }
        else {
            Write-Log "‚ùå ReDoc com problemas" -Level ERROR
        }
    }
    catch {
        Write-Log "‚ùå Erro no ReDoc: $($_.Exception.Message)" -Level ERROR
    }
    
    # Testar Schema OpenAPI
    try {
        $response = Invoke-WebRequest -Uri $SchemaUrl -SkipCertificateCheck -TimeoutSec 10
        $schema = $response.Content | ConvertFrom-Json
        if ($schema) {
            Write-Log "‚úÖ Schema OpenAPI v√°lido" -Level SUCCESS
            return $schema
        }
    }
    catch {
        Write-Log "‚ùå Erro no Schema OpenAPI: $($_.Exception.Message)" -Level ERROR
    }
}

# Fun√ß√£o para gerar relat√≥rio
function Generate-Report {
    param($Schema)
    
    Write-Log "Gerando relat√≥rio de documenta√ß√£o..."
    
    $report = @"
# üìä Relat√≥rio de Documenta√ß√£o da API

## üìÖ Data: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

## üîó URLs de Documenta√ß√£o

- **Swagger UI**: $ApiDocsUrl
- **ReDoc**: $ReDocUrl
- **OpenAPI Schema**: $SchemaUrl

## üìã Endpoints Dispon√≠veis

### üîê Autentica√ß√£o
- `POST /api/v1/auth/login/` - Login com JWT
- `POST /api/v1/auth/refresh/` - Renovar token
- `POST /api/v1/auth/verify/` - Verificar token

### üë• Respons√°veis
- `GET /api/v1/cadastro/responsaveis/` - Listar respons√°veis
- `POST /api/v1/cadastro/responsaveis/` - Criar respons√°vel
- `GET /api/v1/cadastro/responsaveis/{id}/` - Obter respons√°vel
- `PUT /api/v1/cadastro/responsaveis/{id}/` - Atualizar respons√°vel
- `DELETE /api/v1/cadastro/responsaveis/{id}/` - Excluir respons√°vel
- `GET /api/v1/cadastro/responsaveis/{id}/com_membros/` - Respons√°vel com membros
- `GET /api/v1/cadastro/responsaveis/{id}/com_demandas/` - Respons√°vel com demandas
- `GET /api/v1/cadastro/responsaveis/buscar_por_cpf/` - Buscar por CPF

### üë§ Membros
- `GET /api/v1/cadastro/membros/` - Listar membros
- `POST /api/v1/cadastro/membros/` - Criar membro
- `GET /api/v1/cadastro/membros/{id}/` - Obter membro
- `PUT /api/v1/cadastro/membros/{id}/` - Atualizar membro
- `DELETE /api/v1/cadastro/membros/{id}/` - Excluir membro
- `GET /api/v1/cadastro/membros/por_responsavel/` - Membros por respons√°vel

### üè• Demandas de Sa√∫de
- `GET /api/v1/cadastro/demandas-saude/` - Listar demandas de sa√∫de
- `POST /api/v1/cadastro/demandas-saude/` - Criar demanda de sa√∫de
- `GET /api/v1/cadastro/demandas-saude/grupos_prioritarios/` - Grupos priorit√°rios

### üè´ Demandas de Educa√ß√£o
- `GET /api/v1/cadastro/demandas-educacao/` - Listar demandas de educa√ß√£o
- `POST /api/v1/cadastro/demandas-educacao/` - Criar demanda de educa√ß√£o

### üè† Demandas de Habita√ß√£o
- `GET /api/v1/cadastro/demandas-habitacao/` - Listar demandas de habita√ß√£o
- `POST /api/v1/cadastro/demandas-habitacao/` - Criar demanda de habita√ß√£o

### üêï Demandas de Ambiente
- `GET /api/v1/cadastro/demandas-ambiente/` - Listar demandas de ambiente
- `POST /api/v1/cadastro/demandas-ambiente/` - Criar demanda de ambiente

### üìã Demandas Internas
- `GET /api/v1/cadastro/demandas-internas/` - Listar demandas internas
- `POST /api/v1/cadastro/demandas-internas/` - Criar demanda interna
- `GET /api/v1/cadastro/demandas-internas/por_status/` - Por status

### üè¢ Alojamentos
- `GET /api/v1/cadastro/alojamentos/` - Listar alojamentos

### üìÆ CEPs Atingidos
- `GET /api/v1/cadastro/ceps-atingidos/` - Listar CEPs atingidos

### üîç Desaparecidos
- `GET /api/v1/cadastro/desaparecidos/` - Listar desaparecidos
- `POST /api/v1/cadastro/desaparecidos/` - Criar registro de desaparecido
- `GET /api/v1/cadastro/desaparecidos/recentes/` - Desaparecidos recentes

## üîß Funcionalidades

### ‚úÖ Implementado
- [x] Documenta√ß√£o Swagger UI
- [x] Documenta√ß√£o ReDoc
- [x] Schema OpenAPI
- [x] Autentica√ß√£o JWT
- [x] Filtros e busca
- [x] Pagina√ß√£o
- [x] Ordena√ß√£o
- [x] Exemplos de uso
- [x] Tags organizadas
- [x] Descri√ß√µes detalhadas

### üìù Melhorias Sugeridas
- [ ] Adicionar mais exemplos de resposta
- [ ] Documentar c√≥digos de erro
- [ ] Adicionar testes automatizados
- [ ] Implementar rate limiting
- [ ] Adicionar valida√ß√£o de entrada

## üöÄ Como Usar

1. **Acesse a documenta√ß√£o**: $ApiDocsUrl
2. **Fa√ßa login**: Use o endpoint `/api/v1/auth/login/`
3. **Copie o token**: Use o token no header `Authorization: Bearer {token}`
4. **Teste os endpoints**: Use o bot√£o "Try it out" no Swagger UI

## üìû Suporte

Para d√∫vidas sobre a API, consulte:
- Documenta√ß√£o completa: `API_DOCUMENTATION.md`
- Swagger UI: $ApiDocsUrl
- ReDoc: $ReDocUrl

"@

    $report | Out-File -FilePath "API_DOCS_REPORT.md" -Encoding UTF8
    Write-Log "‚úÖ Relat√≥rio gerado: API_DOCS_REPORT.md" -Level SUCCESS
}

# Fun√ß√£o para baixar schema
function Download-Schema {
    Write-Log "Baixando schema OpenAPI..."
    
    try {
        $response = Invoke-WebRequest -Uri $SchemaUrl -SkipCertificateCheck -TimeoutSec 30
        $schema = $response.Content
        
        if ($schema) {
            $schema | Out-File -FilePath "openapi_schema.json" -Encoding UTF8
            $size = (Get-Item "openapi_schema.json").Length
            Write-Log "‚úÖ Schema baixado com sucesso" -Level SUCCESS
            Write-Log "üìä Tamanho do schema: $size bytes" -Level INFO
            
            # Validar JSON
            try {
                $schemaObj = $schema | ConvertFrom-Json
                Write-Log "‚úÖ Schema JSON v√°lido" -Level SUCCESS
                
                # Contar endpoints
                $endpoints = $schemaObj.paths.PSObject.Properties.Name.Count
                Write-Log "üìä Total de endpoints documentados: $endpoints" -Level INFO
                
                # Contar tags
                $tags = $schemaObj.tags.Count
                Write-Log "üìä Total de tags: $tags" -Level INFO
                
                # Mostrar tags
                Write-Log "üè∑Ô∏è Tags dispon√≠veis:" -Level INFO
                foreach ($tag in $schemaObj.tags) {
                    Write-Host "  - $($tag.name)" -ForegroundColor Gray
                }
                
                return $schemaObj
            }
            catch {
                Write-Log "‚ùå Schema JSON inv√°lido: $($_.Exception.Message)" -Level ERROR
            }
        }
    }
    catch {
        Write-Log "‚ùå Falha ao baixar schema: $($_.Exception.Message)" -Level ERROR
    }
}

# Fun√ß√£o principal
function Main {
    Write-Host "üîß Gerando documenta√ß√£o da API..." -ForegroundColor Cyan
    Write-Host ""
    
    # Testar conectividade
    if (-not (Test-Connectivity)) {
        Write-Log "‚ùå N√£o foi poss√≠vel conectar ao servidor. Verifique se os containers est√£o rodando." -Level ERROR
        exit 1
    }
    
    # Testar endpoints de documenta√ß√£o
    $schema = Test-DocumentationEndpoints
    
    # Baixar e analisar schema
    $schemaObj = Download-Schema
    
    # Gerar relat√≥rio
    Generate-Report -Schema $schemaObj
    
    Write-Host ""
    Write-Log "üéâ Documenta√ß√£o gerada com sucesso!" -Level SUCCESS
    Write-Log "üìñ Acesse: $ApiDocsUrl" -Level INFO
    Write-Log "üìã Relat√≥rio: API_DOCS_REPORT.md" -Level INFO
    Write-Log "üìÑ Schema: openapi_schema.json" -Level INFO
    
    Write-Host ""
    Write-Host "üîó Links √∫teis:" -ForegroundColor Yellow
    Write-Host "  - Swagger UI: $ApiDocsUrl" -ForegroundColor White
    Write-Host "  - ReDoc: $ReDocUrl" -ForegroundColor White
    Write-Host "  - Schema: $SchemaUrl" -ForegroundColor White
    Write-Host ""
}

# Executar fun√ß√£o principal
Main 